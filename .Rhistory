# 3) DETERMINISTIC SIMULATIONS
# -----------------------------
# deterministic_simulation() returns a length-121 numeric vector (time=0..120)
det_large_spread <- deterministic_simulation(large_spread_state, projection_matrix, simul_length)
det_small_spread <- deterministic_simulation(small_spread_state, projection_matrix, simul_length)
# -----------------------------
# 4) ACCUMULATORS FOR STOCHASTIC
# -----------------------------
total_sims_sum_large <- rep(0, simul_length + 1)  # length 121
total_sims_sum_small <- rep(0, simul_length + 1)
count_large <- 0
count_small <- 0
# -----------------------------
# 5) LOOP OVER .rda FILES
# -----------------------------
for (f in seq_along(rda_files)) {
file_path <- rda_files[f]
# Load simulation_results (list of numeric vectors, each length ~121)
load(file_path)
# Extract HPC job index, e.g. "output_17.rda" => 17
file_name <- basename(file_path)
iter_str  <- sub("output_(\\d+)\\.rda", "\\1", file_name)
job_idx   <- as.numeric(iter_str)
# HPC logic: 0=large_adult, 1=large_spread, 2=small_adult, 3=small_spread
mod_val <- job_idx %% 4
if (mod_val == 1) {
cond_name <- "large spread"
} else if (mod_val == 3) {
cond_name <- "small spread"
} else {
# skip large_adult(0) & small_adult(2)
next
}
# simulation_results is a list of length 150 (by default),
# each element is a numeric vector of length 121
for (i in seq_along(simulation_results)) {
sim_vec <- simulation_results[[i]]
# keep all 121 points:
if (cond_name == "large spread") {
total_sims_sum_large <- total_sims_sum_large + sim_vec
count_large <- count_large + 1
} else {
# small spread
total_sims_sum_small <- total_sims_sum_small + sim_vec
count_small <- count_small + 1
}
}
}
# -----------------------------
# 6) AVERAGE STOCHASTIC TRENDS
# -----------------------------
mean_large_spread <- total_sims_sum_large / max(count_large, 1)
mean_small_spread <- total_sims_sum_small / max(count_small, 1)
# -----------------------------
# 7) COMPUTE DEVIATION
# -----------------------------
# Ratio of mean stochastic to deterministic, each length 121
deviation_large <- mean_large_spread / det_large_spread
deviation_small <- mean_small_spread / det_small_spread
# -----------------------------
# 8) MAKE THE PLOT
# -----------------------------
png("results/question_6.png", width = 600, height = 400)
# Time axis = 0..120
time_axis <- 0:simul_length
# Set up a 1-row, 2-column layout to produce two separate panels
par(mfrow = c(1, 2))
# Panel 1: Large spread
plot(
time_axis, deviation_large, type = "l", col = "blue",
ylim = c(0.95, max(deviation_large, na.rm = TRUE) * 1.1),
xlab = "Time step", ylab = "Deviation (Stochastic / Deterministic)",
main = "Deviation: Large Spread"
)
abline(h = 1, col = "darkgray", lty = 2)  # reference line at 1
# Panel 2: Small spread
plot(
time_axis, deviation_small, type = "l", col = "red",
ylim = c(0.95, max(deviation_small, na.rm = TRUE) * 1.1),
xlab = "Time step", ylab = "Deviation (Stochastic / Deterministic)",
main = "Deviation: Small Spread"
)
abline(h = 1, col = "darkgray", lty = 2)
dev.off()
# -----------------------------
# 9) RETURN WRITTEN ANSWER
# -----------------------------
return(
paste(
"For the large-spread initial condition, the deterministic model",
"more closely approximates the average stochastic trend. When the",
"initial population is large, random variation has a smaller relative",
"impact, so the mean stochastic trajectory remains closer to deterministic."
)
)
}
# Call the function
question_6()
# Question 6
question_6 <- function() {
# -----------------------------
# 1) FIND .RDA FILES
# -----------------------------
rda_files <- list.files(
path = "output",         # directory to look in
pattern = "\\.rda$",     # only .rda files
full.names = TRUE        # include full path
)
if (length(rda_files) == 0) {
stop("No .rda files found in 'output' directory.")
}
# -----------------------------
# 2) INITIAL SETUP & MATRICES
# -----------------------------
num_stages   <- 4
simul_length <- 120
# HPC code sets large_spread=100, small_spread=10
large_initial_spread <- 100
small_initial_spread <- 10
# Spread these totals among 4 stages
large_spread_state <- state_initialise_spread(num_stages, large_initial_spread)
small_spread_state <- state_initialise_spread(num_stages, small_initial_spread)
growth_matrix <- matrix(
c(0.1, 0.0, 0.0, 0.0,
0.5, 0.4, 0.0, 0.0,
0.0, 0.4, 0.7, 0.0,
0.0, 0.0, 0.25, 0.4),
nrow = num_stages, byrow = TRUE
)
reproduction_matrix <- matrix(
c(0.0, 0.0, 0.0, 2.6,
0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0),
nrow = num_stages, byrow = TRUE
)
projection_matrix <- reproduction_matrix + growth_matrix
# -----------------------------
# 3) DETERMINISTIC SIMULATIONS
# -----------------------------
# deterministic_simulation() returns a length-121 numeric vector (time=0..120)
det_large_spread <- deterministic_simulation(large_spread_state, projection_matrix, simul_length)
det_small_spread <- deterministic_simulation(small_spread_state, projection_matrix, simul_length)
# -----------------------------
# 4) ACCUMULATORS FOR STOCHASTIC
# -----------------------------
total_sims_sum_large <- rep(0, simul_length + 1)  # length 121
total_sims_sum_small <- rep(0, simul_length + 1)
count_large <- 0
count_small <- 0
# -----------------------------
# 5) LOOP OVER .rda FILES
# -----------------------------
for (f in seq_along(rda_files)) {
file_path <- rda_files[f]
# Load simulation_results (list of numeric vectors, each length ~121)
load(file_path)
# Extract HPC job index, e.g. "output_17.rda" => 17
file_name <- basename(file_path)
iter_str  <- sub("output_(\\d+)\\.rda", "\\1", file_name)
job_idx   <- as.numeric(iter_str)
# HPC logic: 0=large_adult, 1=large_spread, 2=small_adult, 3=small_spread
mod_val <- job_idx %% 4
if (mod_val == 1) {
cond_name <- "large spread"
} else if (mod_val == 3) {
cond_name <- "small spread"
} else {
# skip large_adult(0) & small_adult(2)
next
}
# simulation_results is a list of length 150 (by default),
# each element is a numeric vector of length 121
for (i in seq_along(simulation_results)) {
sim_vec <- simulation_results[[i]]
# keep all 121 points:
if (cond_name == "large spread") {
total_sims_sum_large <- total_sims_sum_large + sim_vec
count_large <- count_large + 1
} else {
# small spread
total_sims_sum_small <- total_sims_sum_small + sim_vec
count_small <- count_small + 1
}
}
}
# -----------------------------
# 6) AVERAGE STOCHASTIC TRENDS
# -----------------------------
mean_large_spread <- total_sims_sum_large / max(count_large, 1)
mean_small_spread <- total_sims_sum_small / max(count_small, 1)
# -----------------------------
# 7) COMPUTE DEVIATION
# -----------------------------
# Ratio of mean stochastic to deterministic, each length 121
deviation_large <- mean_large_spread / det_large_spread
deviation_small <- mean_small_spread / det_small_spread
# -----------------------------
# 8) MAKE THE PLOT
# -----------------------------
png("results/question_6.png", width = 600, height = 400)
# Time axis = 0..120
time_axis <- 0:simul_length
# Set up a 1-row, 2-column layout to produce two separate panels
par(mfrow = c(1, 2))
# Panel 1: Large spread
plot(
time_axis, deviation_large, type = "l", col = "blue",
ylim = c(0.95, max(deviation_large, na.rm = TRUE) * 1.05),
xlab = "Time step", ylab = "Deviation (Stochastic / Deterministic)",
main = "Deviation: Large Spread"
)
abline(h = 1, col = "darkgray", lty = 2)  # reference line at 1
# Panel 2: Small spread
plot(
time_axis, deviation_small, type = "l", col = "red",
ylim = c(0.95, max(deviation_small, na.rm = TRUE) * 1.05),
xlab = "Time step", ylab = "Deviation (Stochastic / Deterministic)",
main = "Deviation: Small Spread"
)
abline(h = 1, col = "darkgray", lty = 2)
dev.off()
# -----------------------------
# 9) RETURN WRITTEN ANSWER
# -----------------------------
return(
paste(
"For the large-spread initial condition, the deterministic model",
"more closely approximates the average stochastic trend. When the",
"initial population is large, random variation has a smaller relative",
"impact, so the mean stochastic trajectory remains closer to deterministic."
)
)
}
# Call the function
question_6()
# Question 6
question_6 <- function() {
# -----------------------------
# 1) FIND .RDA FILES
# -----------------------------
rda_files <- list.files(
path = "output",         # directory to look in
pattern = "\\.rda$",     # only .rda files
full.names = TRUE        # include full path
)
if (length(rda_files) == 0) {
stop("No .rda files found in 'output' directory.")
}
# -----------------------------
# 2) INITIAL SETUP & MATRICES
# -----------------------------
num_stages   <- 4
simul_length <- 120
# HPC code sets large_spread=100, small_spread=10
large_initial_spread <- 100
small_initial_spread <- 10
# Spread these totals among 4 stages
large_spread_state <- state_initialise_spread(num_stages, large_initial_spread)
small_spread_state <- state_initialise_spread(num_stages, small_initial_spread)
growth_matrix <- matrix(
c(0.1, 0.0, 0.0, 0.0,
0.5, 0.4, 0.0, 0.0,
0.0, 0.4, 0.7, 0.0,
0.0, 0.0, 0.25, 0.4),
nrow = num_stages, byrow = TRUE
)
reproduction_matrix <- matrix(
c(0.0, 0.0, 0.0, 2.6,
0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0),
nrow = num_stages, byrow = TRUE
)
projection_matrix <- reproduction_matrix + growth_matrix
# -----------------------------
# 3) DETERMINISTIC SIMULATIONS
# -----------------------------
# deterministic_simulation() returns a length-121 numeric vector (time=0..120)
det_large_spread <- deterministic_simulation(large_spread_state, projection_matrix, simul_length)
det_small_spread <- deterministic_simulation(small_spread_state, projection_matrix, simul_length)
# -----------------------------
# 4) ACCUMULATORS FOR STOCHASTIC
# -----------------------------
total_sims_sum_large <- rep(0, simul_length + 1)  # length 121
total_sims_sum_small <- rep(0, simul_length + 1)
count_large <- 0
count_small <- 0
# -----------------------------
# 5) LOOP OVER .rda FILES
# -----------------------------
for (f in seq_along(rda_files)) {
file_path <- rda_files[f]
# Load simulation_results (list of numeric vectors, each length ~121)
load(file_path)
# Extract HPC job index, e.g. "output_17.rda" => 17
file_name <- basename(file_path)
iter_str  <- sub("output_(\\d+)\\.rda", "\\1", file_name)
job_idx   <- as.numeric(iter_str)
# HPC logic: 0=large_adult, 1=large_spread, 2=small_adult, 3=small_spread
mod_val <- job_idx %% 4
if (mod_val == 1) {
cond_name <- "large spread"
} else if (mod_val == 3) {
cond_name <- "small spread"
} else {
# skip large_adult(0) & small_adult(2)
next
}
# simulation_results is a list of length 150 (by default),
# each element is a numeric vector of length 121
for (i in seq_along(simulation_results)) {
sim_vec <- simulation_results[[i]]
# keep all 121 points:
if (cond_name == "large spread") {
total_sims_sum_large <- total_sims_sum_large + sim_vec
count_large <- count_large + 1
} else {
# small spread
total_sims_sum_small <- total_sims_sum_small + sim_vec
count_small <- count_small + 1
}
}
}
# -----------------------------
# 6) AVERAGE STOCHASTIC TRENDS
# -----------------------------
mean_large_spread <- total_sims_sum_large / max(count_large, 1)
mean_small_spread <- total_sims_sum_small / max(count_small, 1)
# -----------------------------
# 7) COMPUTE DEVIATION
# -----------------------------
# Ratio of mean stochastic to deterministic, each length 121
deviation_large <- mean_large_spread / det_large_spread
deviation_small <- mean_small_spread / det_small_spread
# -----------------------------
# 8) MAKE THE PLOT
# -----------------------------
png("results/question_6.png", width = 600, height = 400)
# Time axis = 0..120
time_axis <- 0:simul_length
# Set up a 1-row, 2-column layout to produce two separate panels
par(mfrow = c(1, 2))
# Panel 1: Large spread
plot(
time_axis, deviation_large, type = "l", col = "blue",
ylim = c(0.95, max(deviation_large, na.rm = TRUE) * 1),
xlab = "Time step", ylab = "Deviation (Stochastic / Deterministic)",
main = "Deviation: Large Spread"
)
abline(h = 1, col = "darkgray", lty = 2)  # reference line at 1
# Panel 2: Small spread
plot(
time_axis, deviation_small, type = "l", col = "red",
ylim = c(0.95, max(deviation_small, na.rm = TRUE) * 1),
xlab = "Time step", ylab = "Deviation (Stochastic / Deterministic)",
main = "Deviation: Small Spread"
)
abline(h = 1, col = "darkgray", lty = 2)
dev.off()
# -----------------------------
# 9) RETURN WRITTEN ANSWER
# -----------------------------
return(
paste(
"For the large-spread initial condition, the deterministic model",
"more closely approximates the average stochastic trend. When the",
"initial population is large, random variation has a smaller relative",
"impact, so the mean stochastic trajectory remains closer to deterministic."
)
)
}
# Call the function
question_6()
# Question 6
question_6 <- function() {
# -----------------------------
# 1) FIND .RDA FILES
# -----------------------------
rda_files <- list.files(
path = "output",         # directory to look in
pattern = "\\.rda$",     # only .rda files
full.names = TRUE        # include full path
)
if (length(rda_files) == 0) {
stop("No .rda files found in 'output' directory.")
}
# -----------------------------
# 2) INITIAL SETUP & MATRICES
# -----------------------------
num_stages   <- 4
simul_length <- 120
# HPC code sets large_spread=100, small_spread=10
large_initial_spread <- 100
small_initial_spread <- 10
# Spread these totals among 4 stages
large_spread_state <- state_initialise_spread(num_stages, large_initial_spread)
small_spread_state <- state_initialise_spread(num_stages, small_initial_spread)
growth_matrix <- matrix(
c(0.1, 0.0, 0.0, 0.0,
0.5, 0.4, 0.0, 0.0,
0.0, 0.4, 0.7, 0.0,
0.0, 0.0, 0.25, 0.4),
nrow = num_stages, byrow = TRUE
)
reproduction_matrix <- matrix(
c(0.0, 0.0, 0.0, 2.6,
0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0),
nrow = num_stages, byrow = TRUE
)
projection_matrix <- reproduction_matrix + growth_matrix
# -----------------------------
# 3) DETERMINISTIC SIMULATIONS
# -----------------------------
# deterministic_simulation() returns a length-121 numeric vector (time=0..120)
det_large_spread <- deterministic_simulation(large_spread_state, projection_matrix, simul_length)
det_small_spread <- deterministic_simulation(small_spread_state, projection_matrix, simul_length)
# -----------------------------
# 4) ACCUMULATORS FOR STOCHASTIC
# -----------------------------
total_sims_sum_large <- rep(0, simul_length + 1)  # length 121
total_sims_sum_small <- rep(0, simul_length + 1)
count_large <- 0
count_small <- 0
# -----------------------------
# 5) LOOP OVER .rda FILES
# -----------------------------
for (f in seq_along(rda_files)) {
file_path <- rda_files[f]
# Load simulation_results (list of numeric vectors, each length ~121)
load(file_path)
# Extract HPC job index, e.g. "output_17.rda" => 17
file_name <- basename(file_path)
iter_str  <- sub("output_(\\d+)\\.rda", "\\1", file_name)
job_idx   <- as.numeric(iter_str)
# HPC logic: 0=large_adult, 1=large_spread, 2=small_adult, 3=small_spread
mod_val <- job_idx %% 4
if (mod_val == 1) {
cond_name <- "large spread"
} else if (mod_val == 3) {
cond_name <- "small spread"
} else {
# skip large_adult(0) & small_adult(2)
next
}
# simulation_results is a list of length 150 (by default),
# each element is a numeric vector of length 121
for (i in seq_along(simulation_results)) {
sim_vec <- simulation_results[[i]]
# keep all 121 points:
if (cond_name == "large spread") {
total_sims_sum_large <- total_sims_sum_large + sim_vec
count_large <- count_large + 1
} else {
# small spread
total_sims_sum_small <- total_sims_sum_small + sim_vec
count_small <- count_small + 1
}
}
}
# -----------------------------
# 6) AVERAGE STOCHASTIC TRENDS
# -----------------------------
mean_large_spread <- total_sims_sum_large / max(count_large, 1)
mean_small_spread <- total_sims_sum_small / max(count_small, 1)
# -----------------------------
# 7) COMPUTE DEVIATION
# -----------------------------
# Ratio of mean stochastic to deterministic, each length 121
deviation_large <- mean_large_spread / det_large_spread
deviation_small <- mean_small_spread / det_small_spread
# -----------------------------
# 8) MAKE THE PLOT
# -----------------------------
png("results/question_6.png", width = 600, height = 400)
# Time axis = 0..120
time_axis <- 0:simul_length
# Set up a 1-row, 2-column layout to produce two separate panels
par(mfrow = c(1, 2))
# Panel 1: Large spread
plot(
time_axis, deviation_large, type = "l", col = "blue",
ylim = c(0.95, max(deviation_large, na.rm = TRUE) * 1.03),
xlab = "Time step", ylab = "Deviation (Stochastic / Deterministic)",
main = "Deviation: Large Spread"
)
abline(h = 1, col = "darkgray", lty = 2)  # reference line at 1
# Panel 2: Small spread
plot(
time_axis, deviation_small, type = "l", col = "red",
ylim = c(0.95, max(deviation_small, na.rm = TRUE) * 1.03),
xlab = "Time step", ylab = "Deviation (Stochastic / Deterministic)",
main = "Deviation: Small Spread"
)
abline(h = 1, col = "darkgray", lty = 2)
dev.off()
# -----------------------------
# 9) RETURN WRITTEN ANSWER
# -----------------------------
return(
paste(
"For the large-spread initial condition, the deterministic model",
"more closely approximates the average stochastic trend. When the",
"initial population is large, random variation has a smaller relative",
"impact, so the mean stochastic trajectory remains closer to deterministic."
)
)
}
# Call the function
question_6()
